#!/usr/bin/env tsx

/**
 * Seeder principal - Rassemble tous les seeders en un seul
 * Usage: npm run seed [type]
 * Types: all (d√©faut), users, todos, clean
 */

import bcrypt from 'bcrypt'
import { prisma } from '../prisma/client'

interface UserSeed {
  email: string
  password: string
}

interface TodoSeed {
  title: string
  description?: string
  completed: boolean
}

export class MainSeeder {
  // Donn√©es des utilisateurs
  private readonly users: UserSeed[] = [
    {
      email: 'admin@example.com',
      password: 'admin123'
    },
    {
      email: 'john.doe@example.com',
      password: 'password123'
    },
    {
      email: 'jane.smith@example.com',
      password: 'password123'
    },
    {
      email: 'alice.johnson@example.com',
      password: 'password123'
    },
    {
      email: 'bob.wilson@example.com',
      password: 'password123'
    }
  ]

  // Templates des todos
  private readonly todoTemplates: TodoSeed[] = [
    {
      title: 'Acheter du pain',
      description: 'Aller √† la boulangerie du quartier avant 18h',
      completed: false
    },
    {
      title: 'Faire les courses',
      description: 'Acheter des l√©gumes, du lait et des ≈ìufs',
      completed: true
    },
    {
      title: 'Rendez-vous m√©decin',
      description: 'Consultation annuelle chez le m√©decin g√©n√©raliste',
      completed: false
    },
    {
      title: 'R√©viser pour l\'examen',
      description: 'Revoir les chapitres 5 √† 8 du cours de math√©matiques',
      completed: false
    },
    {
      title: 'Nettoyer la maison',
      description: 'Passer l\'aspirateur et faire la poussi√®re',
      completed: true
    },
    {
      title: 'Appeler maman',
      description: 'Prendre des nouvelles et organiser le repas du dimanche',
      completed: false
    },
    {
      title: 'R√©paration v√©lo',
      description: 'Amener le v√©lo chez le r√©parateur pour changer la cha√Æne',
      completed: false
    },
    {
      title: 'Lecture du livre',
      description: 'Finir "Le Petit Prince" d\'Antoine de Saint-Exup√©ry',
      completed: true
    },
    {
      title: 'Sport - Jogging',
      description: 'Courir 5km dans le parc, objectif sous 30 minutes',
      completed: false
    },
    {
      title: 'Payer les factures',
      description: 'R√©gler √©lectricit√©, eau et internet',
      completed: true
    },
    {
      title: 'Pr√©paration pr√©sentation',
      description: 'Finaliser les slides pour la r√©union de demain',
      completed: false
    },
    {
      title: 'Arroser les plantes',
      description: 'Arroser toutes les plantes d\'int√©rieur et du balcon',
      completed: false
    }
  ]

  /**
   * Seed complet - Utilisateurs + Todos
   */
  async seedAll(): Promise<void> {
    console.log('üöÄ Starting complete database seeding...')
    console.log('=' .repeat(50))

    try {
      await this.seedUsers()
      console.log('')
      await this.seedTodos()
      console.log('')
      await this.showSummary()

      console.log('=' .repeat(50))
      console.log('‚úÖ Complete database seeding finished successfully!')
    } catch (error) {
      console.error('‚ùå Error during complete seeding:', error)
      throw error
    }
  }

  /**
   * Seed uniquement les utilisateurs
   */
  async seedUsers(): Promise<void> {
    console.log('üå± Seeding users...')

    // Supprimer les utilisateurs existants
    await prisma.user.deleteMany()
    console.log('üóëÔ∏è Existing users deleted')

    // Cr√©er les nouveaux utilisateurs
    for (const userData of this.users) {
      const hashedPassword = await bcrypt.hash(userData.password, 12)
      
      await prisma.user.create({
        data: {
          email: userData.email,
          password: hashedPassword
        }
      })
      
      console.log(`‚úÖ User created: ${userData.email}`)
    }

    console.log(`üéâ ${this.users.length} users seeded successfully!`)
  }

  /**
   * Seed uniquement les todos
   */
  async seedTodos(): Promise<void> {
    console.log('üå± Seeding todos...')

    // R√©cup√©rer tous les utilisateurs
    const users = await prisma.user.findMany()
    
    if (users.length === 0) {
      console.log('‚ùå No users found. Please seed users first.')
      return
    }

    // Supprimer les todos existants
    await prisma.todo.deleteMany()
    console.log('üóëÔ∏è Existing todos deleted')

    let totalTodos = 0

    // Cr√©er des todos pour chaque utilisateur
    for (const user of users) {
      // Nombre al√©atoire de todos par utilisateur (entre 3 et 8)
      const todoCount = Math.floor(Math.random() * 6) + 3
      const userTodos = this.getRandomTodos(todoCount)

      for (const todoData of userTodos) {
        await prisma.todo.create({
          data: {
            title: todoData.title,
            description: todoData.description,
            completed: todoData.completed,
            userId: user.id
          }
        })
        totalTodos++
      }

      console.log(`‚úÖ ${todoCount} todos created for user: ${user.email}`)
    }

    console.log(`üéâ ${totalTodos} todos seeded successfully!`)
  }

  /**
   * Nettoyer toute la base de donn√©es
   */
  async clean(): Promise<void> {
    console.log('üßπ Cleaning database...')
    
    await prisma.todo.deleteMany()
    console.log('üóëÔ∏è All todos deleted')
    
    await prisma.user.deleteMany()
    console.log('üóëÔ∏è All users deleted')
    
    console.log('‚úÖ Database cleaned successfully!')
  }

  /**
   * Afficher un r√©sum√© des donn√©es
   */
  private async showSummary(): Promise<void> {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        createdAt: true
      }
    })

    const todoStats = await this.getTodoStats()

    console.log('üìä SEEDING SUMMARY')
    console.log('-' .repeat(30))
    console.log(`üë• Users: ${users.length}`)
    console.log(`üìù Total Todos: ${todoStats.total}`)
    console.log(`‚úÖ Completed: ${todoStats.completed}`)
    console.log(`‚è≥ Pending: ${todoStats.pending}`)
    console.log('')

    console.log('üë• Created Users:')
    users.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.email} (ID: ${user.id})`)
    })
  }

  /**
   * Obtenir des todos al√©atoires
   */
  private getRandomTodos(count: number): TodoSeed[] {
    const shuffled = [...this.todoTemplates].sort(() => 0.5 - Math.random())
    return shuffled.slice(0, count)
  }

  /**
   * Obtenir les statistiques des todos
   */
  private async getTodoStats() {
    const total = await prisma.todo.count()
    const completed = await prisma.todo.count({ where: { completed: true } })
    const pending = total - completed

    return {
      total,
      completed,
      pending
    }
  }
}

// Fonction principale d'ex√©cution
async function runMainSeeder(type: 'all' | 'users' | 'todos' | 'clean' = 'all') {
  const seeder = new MainSeeder()

  console.log('üå± Hono Todo API - Main Database Seeder')
  console.log(`üìÖ ${new Date().toLocaleString()}`)
  console.log(`üéØ Type: ${type}`)
  console.log('')

  try {
    switch (type) {
      case 'users':
        await seeder.seedUsers()
        break
      case 'todos':
        await seeder.seedTodos()
        break
      case 'clean':
        await seeder.clean()
        break
      case 'all':
      default:
        await seeder.seedAll()
        break
    }
  } catch (error) {
    console.error('‚ùå Main seeding failed:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le script si lanc√© directement
async function main() {
  const args = process.argv.slice(2)
  const type = (args[0] as 'all' | 'users' | 'todos' | 'clean') || 'all'
  await runMainSeeder(type)
}

// Point d'entr√©e
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Main seeder execution failed:', error)
    process.exit(1)
  })
}

export { runMainSeeder }
export default MainSeeder